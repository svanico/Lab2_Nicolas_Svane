// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2022 13:33:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Esquematico_C
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Esquematico_C_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	Cin,
	CLK,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
input  Cin;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3 or Cin or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Esquematico_C_vlg_check_tst (
	Carry,
	F0,
	F1,
	F2,
	F3,
	Sign,
	V,
	Z,
	sampler_rx
);
input  Carry;
input  F0;
input  F1;
input  F2;
input  F3;
input  Sign;
input  V;
input  Z;
input sampler_rx;

reg  Carry_expected;
reg  F0_expected;
reg  F1_expected;
reg  F2_expected;
reg  F3_expected;
reg  Sign_expected;
reg  V_expected;
reg  Z_expected;

reg  Carry_prev;
reg  F0_prev;
reg  F1_prev;
reg  F2_prev;
reg  F3_prev;
reg  Sign_prev;
reg  V_prev;
reg  Z_prev;

reg  Carry_expected_prev;
reg  F0_expected_prev;
reg  F1_expected_prev;
reg  F2_expected_prev;
reg  F3_expected_prev;
reg  Sign_expected_prev;
reg  V_expected_prev;
reg  Z_expected_prev;

reg  last_Carry_exp;
reg  last_F0_exp;
reg  last_F1_exp;
reg  last_F2_exp;
reg  last_F3_exp;
reg  last_Sign_exp;
reg  last_V_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	Carry_prev = Carry;
	F0_prev = F0;
	F1_prev = F1;
	F2_prev = F2;
	F3_prev = F3;
	Sign_prev = Sign;
	V_prev = V;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Carry_expected_prev = Carry_expected;
	F0_expected_prev = F0_expected;
	F1_expected_prev = F1_expected;
	F2_expected_prev = F2_expected;
	F3_expected_prev = F3_expected;
	Sign_expected_prev = Sign_expected;
	V_expected_prev = V_expected;
	Z_expected_prev = Z_expected;
end



// expected Carry
initial
begin
	Carry_expected = 1'bX;
end 

// expected F0
initial
begin
	F0_expected = 1'bX;
end 

// expected F1
initial
begin
	F1_expected = 1'bX;
end 

// expected F2
initial
begin
	F2_expected = 1'bX;
end 

// expected F3
initial
begin
	F3_expected = 1'bX;
end 

// expected Sign
initial
begin
	Sign_expected = 1'bX;
end 

// expected V
initial
begin
	V_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(Carry_expected or Carry or F0_expected or F0 or F1_expected or F1 or F2_expected or F2 or F3_expected or F3 or Sign_expected or Sign or V_expected or V or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Carry = %b | expected F0 = %b | expected F1 = %b | expected F2 = %b | expected F3 = %b | expected Sign = %b | expected V = %b | expected Z = %b | ",Carry_expected_prev,F0_expected_prev,F1_expected_prev,F2_expected_prev,F3_expected_prev,Sign_expected_prev,V_expected_prev,Z_expected_prev);
	$display("| real Carry = %b | real F0 = %b | real F1 = %b | real F2 = %b | real F3 = %b | real Sign = %b | real V = %b | real Z = %b | ",Carry_prev,F0_prev,F1_prev,F2_prev,F3_prev,Sign_prev,V_prev,Z_prev);
`endif
	if (
		( Carry_expected_prev !== 1'bx ) && ( Carry_prev !== Carry_expected_prev )
		&& ((Carry_expected_prev !== last_Carry_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Carry :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Carry_expected_prev);
		$display ("     Real value = %b", Carry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Carry_exp = Carry_expected_prev;
	end
	if (
		( F0_expected_prev !== 1'bx ) && ( F0_prev !== F0_expected_prev )
		&& ((F0_expected_prev !== last_F0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F0_exp = F0_expected_prev;
	end
	if (
		( F1_expected_prev !== 1'bx ) && ( F1_prev !== F1_expected_prev )
		&& ((F1_expected_prev !== last_F1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_F1_exp = F1_expected_prev;
	end
	if (
		( F2_expected_prev !== 1'bx ) && ( F2_prev !== F2_expected_prev )
		&& ((F2_expected_prev !== last_F2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F2_expected_prev);
		$display ("     Real value = %b", F2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_F2_exp = F2_expected_prev;
	end
	if (
		( F3_expected_prev !== 1'bx ) && ( F3_prev !== F3_expected_prev )
		&& ((F3_expected_prev !== last_F3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F3_expected_prev);
		$display ("     Real value = %b", F3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F3_exp = F3_expected_prev;
	end
	if (
		( Sign_expected_prev !== 1'bx ) && ( Sign_prev !== Sign_expected_prev )
		&& ((Sign_expected_prev !== last_Sign_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sign :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sign_expected_prev);
		$display ("     Real value = %b", Sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sign_exp = Sign_expected_prev;
	end
	if (
		( V_expected_prev !== 1'bx ) && ( V_prev !== V_expected_prev )
		&& ((V_expected_prev !== last_V_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_expected_prev);
		$display ("     Real value = %b", V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_V_exp = V_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Esquematico_C_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
reg Cin;
reg CLK;
// wires                                               
wire Carry;
wire F0;
wire F1;
wire F2;
wire F3;
wire Sign;
wire V;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Esquematico_C i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.Carry(Carry),
	.Cin(Cin),
	.CLK(CLK),
	.F0(F0),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.Sign(Sign),
	.V(V),
	.Z(Z)
);

// A0
initial
begin
	A0 = 1'b1;
end 

// A1
initial
begin
	A1 = 1'b1;
end 

// A2
initial
begin
	A2 = 1'b1;
end 

// A3
initial
begin
	A3 = 1'b0;
end 

// B0
initial
begin
	B0 = 1'b1;
end 

// B1
initial
begin
	B1 = 1'b1;
end 

// B2
initial
begin
	B2 = 1'b1;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

Esquematico_C_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.Cin(Cin),
	.CLK(CLK),
	.sampler_tx(sampler)
);

Esquematico_C_vlg_check_tst tb_out(
	.Carry(Carry),
	.F0(F0),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.Sign(Sign),
	.V(V),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

